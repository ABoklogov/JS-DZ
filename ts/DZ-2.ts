// // 11/2
// –°–µ—Ä–≤–∏—Å—É –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ —É–∫—Ä–∞—à–µ–Ω–∏–π –Ω—É–∂–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—á–∏—Ç–∞–ª–∞ —Ü–µ–Ω—É –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤ –∏ —Ü–µ–Ω—ã –∑–∞ —Å–ª–æ–≤–æ.
// –û–±—ä—è–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è calculateEngravingPrice(message, pricePerWord). –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ —Å–ª–æ–≤ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–∞–º–∏ (–ø–∞—Ä–∞–º–µ—Ç—Ä message) –∏ —Ü–µ–Ω—É –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä pricePerWord).
// –ù–∞–ø–∏—à–∏ —Ç–µ–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥—Ä–∞–≤–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ.
// type CalculateEngravingPrice = (message: string, pricePerWord: number) => number;

// const calculateEngravingPrice: CalculateEngravingPrice = function(message, pricePerWord) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// const array = message.split(' ');
// const arrayLength = array.length;
// return arrayLength * pricePerWord;
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// const total = calculateEngravingPrice('JavaScript —É –º–µ–Ω—è –≤ –∫—Ä–æ–≤–∏', 10);
// console.log("üöÄ ~ total:", total)


// 12/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ makeStringFromArray(array, delimeter) —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π string —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞ array c —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º delimeter - —Å—Ç—Ä–æ–∫—É.
// type MakeStringFromArray = (array: (string | number)[], delimeter: string) => string;

// const makeStringFromArray: MakeStringFromArray = function(array, delimeter) {
//   let string;
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//  string = array.join(delimeter);
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   return string;
// }

// console.log(makeStringFromArray([1,2,3], '-'));

// 13/2
// –ó–∞–¥–∞–Ω–∏–µ
// –¢–µ—Ä–º–∏–Ω slug - —ç—Ç–æ —á–µ–ª–æ–≤–µ–∫–æ-–ø–æ–Ω—è—Ç–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∏—Ç–∞–±–µ–ª—å–Ω—ã—Ö URL-–∞–¥–µ—Å–æ–≤.
// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤–º–µ—Å—Ç–æ —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–µ–ª –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ mysite.com/posts/1q8fh74tx, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∏—Ç—Å—è –±–æ–ª–µ–µ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è: mysite.com/posts/–º–∞—Å—Å–∏–≤—ã-–¥–ª—è-–Ω–æ–≤–∏—á–∫–æ–≤.
// –í–Ω–∏–º–∞–Ω–∏–µ
// Slug —ç—Ç–æ –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ, —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Ç–∏—Ä–µ.
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é slugify(title) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏, –ø–∞—Ä–∞–º–µ—Ç—Ä title, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç slug, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏.
// –ó–Ω–∞—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ title –±—É–¥—É—Ç —Å—Ç—Ä–æ–∫–∏, —Å–ª–æ–≤–∞ –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ–±–µ–ª–∞–º–∏.
// –í—Å–µ —Å–∏–º–≤–æ–ª—ã slug –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ.
// –í—Å–µ —Å–ª–æ–≤–∞ slug –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑–¥–µ–ª–µ–Ω—ã —Ç–∏—Ä–µ.

// type Slugify = (title: string) => string;

// const slugify: Slugify = function (title) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   let totalTitle:any = '';
//   totalTitle = title.toLowerCase();
//   totalTitle = totalTitle.split(' ');
//   return totalTitle = totalTitle.join('-');
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }

// console.log("üöÄ ~ slugify ~ slugify:", slugify('–≠—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏'))

// 14/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ –∫–æ–ø–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ fruits.
// firstTwoEls - –º–∞—Å—Å–∏–≤ –∏–∑ –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// nonExtremeEls - –º–∞—Å—Å–∏–≤ –∏–∑ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—Ä–æ–º–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ.
// lastThreeEls - –º–∞—Å—Å–∏–≤ –∏–∑ —Ç—Ä—ë—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.

// const fruits:string[] = ['—è–±–ª–æ–∫–æ', '—Å–ª–∏–≤–∞', '–≥—Ä—É—à–∞', '–∞–ø–µ–ª—å—Å–∏–Ω', '–±–∞–Ω–∞–Ω'];
// // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// const firstTwoEls = fruits.slice(0, 2);
// const nonExtremeEls = fruits.slice(1, 4);
// const lastThreeEls = fruits.slice(-3);

// console.log("üöÄ ~ firstTwoEls:", firstTwoEls)
// console.log("üöÄ ~ nonExtremeEls:", nonExtremeEls)
// console.log("üöÄ ~ lastThreeEls:", lastThreeEls)


// 15/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π allClients –ø–æ–ª—É—á–∏–ª—Å—è –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–æ–≤ oldClients –∏ newClients.
// type arrType = string[];

// const oldClients: arrType = ['–ú–∞–Ω–≥–æ', '–ê—è–∫—Å', '–ü–æ–ª–∏', '–ö–∏–≤–∏'];
// const newClients: arrType = ['–ü–µ—Ä—Å–∏–∫', '–•—å—é—Å—Ç–æ–Ω'];
// const allClients = oldClients.concat(newClients); // –î–æ–ø–æ–ª–Ω–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
// console.log("üöÄ ~ allClients:", allClients)


// 16/2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é makeArray(firstArray, secondArray, maxLength) –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ —Å–æ –≤—Å–µ–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –¥–≤—É—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö firstArray –∏ secondArray. –ü–∞—Ä–∞–º–µ—Ç—Ä maxLength —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞.
// –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –±–æ–ª—å—à–µ maxLength, —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª–∏–Ω–æ–π maxLength —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
// –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Ü–µ–ª–∏–∫–æ–º.
// type MakeArray = (firstArray: (string | number)[], secondArray: (string | number)[], maxLength: number) => (string | number)[];

// const makeArray: MakeArray = function(firstArray, secondArray, maxLength) {
//     // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   // –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
//   let newArray = firstArray.concat(secondArray);
//   // –¥–ª–∏–Ω–∞ –Ω–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
//   let newArrayLength = newArray.length;
//     if (newArrayLength > maxLength) {
//   return newArray = newArray.slice(0, maxLength);
//     }
//     else {
//    return newArray;
//   }
//     // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// console.log(makeArray([1,2,3], ['f', 'd', 'g'], 10));
// console.log(makeArray([1,2,3], ['f', 'd', 'g'], 5));


// 17/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ —Ü–∏–∫–ª for —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞–ª –≤—Å–µ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç start –¥–æ end –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.
// const start:number = 3;
// const end: number = 7;

// for (let i = start; i <= end; i += 1) {
//   //   –î–æ–ø–æ–ª–Ω–∏ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
//   console.log(i);
// }

// 18/2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é calculateTotal(number), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–ø–∞—Ä–∞–º–µ—Ç—Ä number) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç –µ–¥–∏–Ω–∏—Ü—ã –∏ –¥–æ —ç—Ç–æ–≥–æ —á–∏—Å–ª–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ number —Ä–∞–≤–Ω–æ 3, —Ç–æ —Å—É–º–º–∞ —ç—Ç–æ 1 + 2 + 3, —Ç–æ –µ—Å—Ç—å 6.
// type CalculateTotal = (number: number) => number;

// const calculateTotal: CalculateTotal = function(number) {
// //   –ø–∏—Å–∞—Ç—å –∫–æ–¥ –Ω–∏–∂–µ
//   let total = 0;
//   for (let i = 1; i <= number; i += 1) {
//    total += i;
//   }
// return total;
//   // console.log(total);
// //   –ø–∏—Å–∞—Ç—å –∫–æ–¥ –≤—ã—à–µ
// }
// console.log(calculateTotal(3));

// 19/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ü–∏–∫–ª–∞ for —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–ª –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ fruits.
// const fruits: string[] = ["—è–±–ª–æ–∫–æ", "—Å–ª–∏–≤–∞", "–≥—Ä—É—à–∞", "–∞–ø–µ–ª—å—Å–∏–Ω"];

// for (let i = 0; i < fruits.length; i += 1) {  //   –ø–∏—Å–∞—Ç—å –∫–æ–¥
//   const fruit = fruits[i]; //   –ø–∏—Å–∞—Ç—å –∫–æ–¥
//   console.log(fruit);
// }

// 20/2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é calculateTotalPrice(order), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä order - –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª, –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—É–º–º—É –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –û–±—â–∞—è —Å—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π total, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –∫–∞–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏.

// type CalculateTotalPrice = (order: number[]) => number;

// const calculateTotalPrice: CalculateTotalPrice = function(order) {
//   let total = 0;
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   for (let i = 0; i < order.length; i += 1) {
//     total += order[i];
//   }
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   return total;
// }
// console.log(calculateTotalPrice([2,2,1]));

// 21/2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–∫—Ü–Ω–∏—é findLongestWord(string) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–æ—è—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ —Å–ª–æ–≤ —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–º (–ø–∞—Ä–∞–º–µ—Ç—Ä string) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∞–º–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–ª–æ–≤–æ –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ.
// type FindLongestWord = (string: string) => string;

// const findLongestWord: FindLongestWord = function(string) {
//   let array:string[] = string.split(" ");
//   let longest = '';

//   for (let i = 0; i < array.length; i += 1) {
//     if (longest.length < array[i].length) {
//       longest = array[i];
//     }
//   }
//   return longest;
// }

// 22/2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ createArrayOfNumbers(min, max) —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è min –¥–æ max.
// type Fn = (min: number, max: number) => number[];

// const createArrayOfNumbers: Fn = function(min, max) {
//   const numbers: number[] = [];
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//     for (let i = min; i <= max; i += 1) {
//       numbers.push(i);
//     }
//     // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   return numbers;
// }
// console.log(createArrayOfNumbers(3, 7));

// 23/2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é filterArray(numbers, value), –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–ø–∞—Ä–∞–º–µ—Ç—Ä numbers) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ numbers, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ —á–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ value (—á–∏—Å–ª–æ).
// type FilterArray = (numbers: number[], value: number) => number[];

// const filterArray: FilterArray = function(numbers, value) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   const newArray: number[] = [];

//   for (let i = 0; i <= numbers.length; i += 1) {
//       if (numbers[i] > value) {
//       newArray.push(numbers[i]);
//       }
//   }
//   return newArray;
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// console.log(filterArray([12,24,8,41,76], 20));

// 24/2
// –ó–∞–¥–∞–Ω–∏–µ
// –§—É–Ω–∫—Ü–∏—è checkFruit(fruit) –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Ñ—Ä—É–∫—Ç–∞ (–ø–∞—Ä–∞–º–µ—Ç—Ä fruit), –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ñ—Ä—É–∫—Ç –≤ –º–∞—Å—Å–∏–≤–µ fruits.
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–∞–∫, —á—Ç–æ –µ—Å–ª–∏:
// —Ñ—Ä—É–∫—Ç –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true;
// —Ñ—Ä—É–∫—Ç–∞ –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
// type CheckFruit = (fruit: string) => (true | false);

// const checkFruit: CheckFruit = function (fruit) {
//   const fruits = ['—è–±–ª–æ–∫–æ', '—Å–ª–∏–≤–∞', '–≥—Ä—É—à–∞', '–∞–ø–µ–ª—å—Å–∏–Ω'];
//   return fruits.includes(fruit);
// }

// 25/2
// –ó–∞–¥–∞–Ω–∏–µ
// –û–±—â–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –º–∞—Å—Å–∏–≤–æ–≤ –Ω–∞–∑—ã–≤–∞—é—Ç —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–æ –≤—Å–µ—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
// –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–∞—Ö [1, 3, 5] –∏ [0, 8, 5, 3] –æ–±—â–∏–º–∏ –±—É–¥—É—Ç —á–∏—Å–ª–∞ 3 –∏ 5, —Ç.–∫. –æ–Ω–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö. –ê —á–∏—Å–ª–∞ 0, 1 –∏ 8 –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–º –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤.
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é getCommonElements(array1, array2) –∫–æ—Ç–æ—Ä–∞—è –ø–æ–ª—É—á–∞–µ—Ç –¥–≤–∞ –º–∞—Å—Å–∏–≤–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã array1 –∏ array2, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ —Ç–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –æ–±–æ–∏—Ö –∏—Å—Ö–æ–¥–Ω—ã—Ö –º–∞—Å—Å–∏–≤–∞—Ö.
// type GetCommonElements = (array1: number[], array2: number[]) => number[];

// const getCommonElements: GetCommonElements = function(array1, array2) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   const newArray: number[] = [];

//   for (let i = 0; i <= array1.length; i += 1) {
//     if (array2.includes(array1[i])) {
//       newArray.push(array1[i]);
//     }
//   }
//   return newArray;
//   //  console.log(newArray);
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// console.log(getCommonElements([1, 2, 3], [2, 1, 17, 19]));  //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [1, 2]

// 26 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –í—ã–ø–æ–ª–Ω–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∫–æ–¥–∞ —Ñ—É–Ω–∫—Ü–∏–∏ calculateTotalPrice(order) –∑–∞–º–µ–Ω–∏–≤ —Ü–∏–∫–ª for –Ω–∞ for...of.
// type Fn = (order: number[]) => number;

// const calculateTotalPrice: Fn = function (order) {
//   let total = 0;
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   for (const ord of order) {
//     //   console.log(ord);
//     total += ord;
//   }
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   return total;
// }
// calculateTotalPrice([164, 48, 291]) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 503.

// 27 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –í—ã–ø–æ–ª–Ω–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏ filterArray(numbers, value) –∑–∞–º–µ–Ω–∏–≤ —Ü–∏–∫–ª for –Ω–∞ for...of.
// type Fn = (numbers: number[], value: number) => number[];

// const filterArray: Fn = function (numbers, value) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   const filteredNumbers: number[] = [];

//   for (const number of numbers) {
//       if (number > value) {
//       filteredNumbers.push(number);
//       }
//   }
//   return filteredNumbers;
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
//  filterArray([12, 24, 8, 41, 76], 38) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [41, 76].

// 28 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è —Ç–∞–∫, —á—Ç–æ–±—ã –∫–æ–¥ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç—ã.
// const a: number = 3 % 3;
// const b: number = 4 % 3;
// const c: number = 11 % 8;
// const d: number = 12 % 7;
// const e: number = 8 % 6;

// 29 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é getEvenNumbers(start, end) –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –æ—Ç start –¥–æ end. –ß—ë—Ç–Ω—ã–º —Å—á–∏—Ç–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 2 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.
// type GetEvenNumbers = (start: number, end: number) => number[];

// const getEvenNumbers: GetEvenNumbers = function (start, end) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   const array: number[] = [];

//   for (let i = start; i <= end; i += 1) {
//     if (i % 2 === 0) {
//       array.push(i);
//     }
//   }
//   return array;
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// getEvenNumbers(3, 11) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [4, 6, 8, 10].
// getEvenNumbers(6, 12) // –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [6, 8, 10, 12]

// 30 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –î–æ–ø–æ–ª–Ω–∏ –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é number –∑–∞–ø–∏—Å—ã–≤–∞–ª–æ—Å—å –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç start –¥–æ end, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ 5 –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞.

// const start: number = 6;
// const end: number = 27;

// let number: number;
// for (let i = start; i < end; i += 1) {
//   if (i % 5 === 0) {
//     number = i;
//     break;
//   }
// }

// 31 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –í—ã–ø–æ–ª–Ω–∏ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–∏ findNumber(start, end, divisor) —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞:
// –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç start –¥–æ end, –∫–æ—Ç–æ—Ä–æ–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ divisor –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞;
// –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä break;
// –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é number.

// type Fn = (start: number, end: number, divisor: number) => number | undefined;

// const findNumber: Fn = function (start, end, divisor) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//   for (let i = start; i < end; i += 1) {
//     if (i % divisor === 0) {
//       return i
//     }
//   }
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }

// console.log(findNumber(1, 100, 4))
// 32 / 2
// –ó–∞–¥–∞–Ω–∏–µ
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é includes(array, value), –∫–æ—Ç–æ—Ä–∞—è –¥–µ–ª–∞–µ—Ç —Ç–æ–∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤–∞ –º–∞—Å—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–∏–µ) - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ array –∑–Ω–∞—á–µ–Ω–∏–µ value, –≤–æ–∑–≤—Ä–∞—â–∞—è true –µ—Å–ª–∏ –µ—Å—Ç—å –∏ false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
// –ü—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ç–µ–ª–µ —Ñ—É–Ω–∫—Ü–∏–∏ includes() –Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –º–∞—Å—Å–∏–≤.includes(–∑–Ω–∞—á–µ–Ω–∏–µ).
// type Fn = (array: (number | string)[], value: string | number) => boolean;

// const includes: Fn = function(array, value) {
//   // –ü–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
//     for (const number of array) {
//         if (number === value) {
//             // console.log(true);
//            return true;
//             // break;
//         }
//     }
//     // console.log(false);
//     return false;
//   // –ü–∏—à–∏ –∫–æ–¥ –≤—ã—à–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
// }
// includes([1, 2, 3, 4, 5], 3) //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
// includes([1, 2, 3, 4, 5], 17) //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
// includes(['–ó–µ–º–ª—è', '–ú–∞—Ä—Å', '–í–µ–Ω–µ—Ä–∞', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω'], '–Æ–ø–∏—Ç–µ—Ä') //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
// includes(['–ó–µ–º–ª—è', '–ú–∞—Ä—Å', '–í–µ–Ω–µ—Ä–∞', '–Æ–ø–∏—Ç–µ—Ä', '–°–∞—Ç—É—Ä–Ω'], '–£—Ä–∞–Ω') //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
// includes(['—è–±–ª–æ–∫–æ', '—Å–ª–∏–≤–∞', '–≥—Ä—É—à–∞', '–∞–ø–µ–ª—å—Å–∏–Ω'], '—Å–ª–∏–≤–∞')// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true.
// includes(['—è–±–ª–æ–∫–æ', '—Å–ª–∏–≤–∞', '–≥—Ä—É—à–∞', '–∞–ø–µ–ª—å—Å–∏–Ω'], '–∫–∏–≤–∏') //–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç false.
